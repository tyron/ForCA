(dp1
S'output'
p2
S''
sS'layer'
p3
S'/home/tiago/web2py/applications/ForCA/controllers/appadmin.py'
p4
sS'code'
p5
S'# -*- coding: utf-8 -*-\n\n# ##########################################################\n# ## make sure administrator is on localhost\n# ###########################################################\n\nimport os\nimport socket\nimport datetime\nimport copy\nimport gluon.contenttype\nimport gluon.fileutils\n\n# ## critical --- make a copy of the environment\n\nglobal_env = copy.copy(globals())\nglobal_env[\'datetime\'] = datetime\n\nhttp_host = request.env.http_host.split(\':\')[0]\nremote_addr = request.env.remote_addr\ntry:\n    hosts = (http_host, socket.gethostname(),\n             socket.gethostbyname(http_host),\n             \'::1\',\'127.0.0.1\',\'::ffff:127.0.0.1\')   \nexcept:\n    hosts = (http_host, )\n\nif request.env.http_x_forwarded_for or request.env.wsgi_url_scheme\\\n     in [\'https\', \'HTTPS\']:\n    session.secure()\nelif (remote_addr not in hosts) and (remote_addr != "127.0.0.1"):\n    raise HTTP(200, T(\'appadmin is disabled because insecure channel\'))\nif not gluon.fileutils.check_credentials(request):\n    redirect(URL(a=\'admin\', c=\'default\', f=\'index\'))\n\nignore_rw = True\nresponse.view = \'appadmin.html\'\nresponse.menu = [[T(\'design\'), False, URL(\'admin\', \'default\', \'design\',\n                 args=[request.application])], [T(\'db\'), False,\n                 URL(r=request, f=\'index\')], [T(\'state\'), False,\n                 URL(r=request, f=\'state\')], [T(\'cache\'), False,\n                 URL(r=request, f=\'ccache\')]]\n\n# ##########################################################\n# ## auxiliary functions\n# ###########################################################\n\n\ndef get_databases(request):\n    dbs = {}\n    for (key, value) in global_env.items():\n        cond = False\n        try:\n            cond = isinstance(value, GQLDB)\n        except:\n            cond = isinstance(value, SQLDB)\n        if cond:\n            dbs[key] = value\n    return dbs\n\n\ndatabases = get_databases(None)\n\n\ndef eval_in_global_env(text):\n    exec (\'_ret=%s\' % text, {}, global_env)\n    return global_env[\'_ret\']\n\n\ndef get_database(request):\n    if request.args and request.args[0] in databases:\n        return eval_in_global_env(request.args[0])\n    else:\n        session.flash = T(\'invalid request\')\n        redirect(URL(r=request, f=\'index\'))\n\n\ndef get_table(request):\n    db = get_database(request)\n    if len(request.args) > 1 and request.args[1] in db.tables:\n        return (db, request.args[1])\n    else:\n        session.flash = T(\'invalid request\')\n        redirect(URL(r=request, f=\'index\'))\n\n\ndef get_query(request):\n    try:\n        return eval_in_global_env(request.vars.query)\n    except Exception:\n        return None\n\n\ndef query_by_table_type(tablename,db,request=request):\n    keyed = hasattr(db[tablename],\'_primarykey\')\n    if keyed:\n        firstkey = db[tablename][db[tablename]._primarykey[0]]\n        cond = \'>0\'\n        if firstkey.type in [\'string\', \'text\']:\n            cond = \'!=""\'\n        qry = \'%s.%s.%s%s\' % (request.args[0], request.args[1], firstkey.name, cond)\n    else:\n        qry = \'%s.%s.id>0\' % tuple(request.args[:2])\n    return qry\n\n\n\n# ##########################################################\n# ## list all databases and tables\n# ###########################################################\n\n\ndef index():\n    return dict(databases=databases)\n\n\n# ##########################################################\n# ## insert a new record\n# ###########################################################\n\n\ndef insert():\n    (db, table) = get_table(request)\n    form = SQLFORM(db[table], ignore_rw=ignore_rw)\n    if form.accepts(request.vars, session):\n        response.flash = T(\'new record inserted\')\n    return dict(form=form,table=db[table])\n\n\n# ##########################################################\n# ## list all records in table and insert new record\n# ###########################################################\n\n\ndef download():\n    import os\n    db = get_database(request)\n    return response.download(request,db)\n\ndef csv():\n    import gluon.contenttype\n    response.headers[\'Content-Type\'] = \\\n        gluon.contenttype.contenttype(\'.csv\')\n    db = get_database(request)\n    query = get_query(request)\n    if not query:\n        return None\n    response.headers[\'Content-disposition\'] = \'attachment; filename=%s_%s.csv\'\\\n         % tuple(request.vars.query.split(\'.\')[:2])\n    return str(db(query).select())\n\n\ndef import_csv(table, file):\n    table.import_from_csv_file(file)\n\ndef select():\n    import re\n    db = get_database(request)\n    dbname = request.args[0]\n    regex = re.compile(\'(?P<table>\\w+)\\.(?P<field>\\w+)=(?P<value>\\d+)\')\n    if len(request.args)>1 and hasattr(db[request.args[1]],\'_primarykey\'):\n        regex = re.compile(\'(?P<table>\\w+)\\.(?P<field>\\w+)=(?P<value>.+)\')\n    if request.vars.query:\n        match = regex.match(request.vars.query)\n        if match:\n            request.vars.query = \'%s.%s.%s==%s\' % (request.args[0],\n                    match.group(\'table\'), match.group(\'field\'),\n                    match.group(\'value\'))\n    else:\n        request.vars.query = session.last_query\n    query = get_query(request)\n    if request.vars.start:\n        start = int(request.vars.start)\n    else:\n        start = 0\n    nrows = 0\n    stop = start + 100\n    table = None\n    rows = []\n    orderby = request.vars.orderby\n    if orderby:\n        orderby = dbname + \'.\' + orderby\n        if orderby == session.last_orderby:\n            if orderby[0] == \'~\':\n                orderby = orderby[1:]\n            else:\n                orderby = \'~\' + orderby\n    session.last_orderby = orderby\n    session.last_query = request.vars.query\n    form = FORM(TABLE(TR(T(\'Query:\'), \'\', INPUT(_style=\'width:400px\',\n                _name=\'query\', _value=request.vars.query or \'\',\n                requires=IS_NOT_EMPTY(error_message=T("Cannot be empty")))), TR(T(\'Update:\'),\n                INPUT(_name=\'update_check\', _type=\'checkbox\',\n                value=False), INPUT(_style=\'width:400px\',\n                _name=\'update_fields\', _value=request.vars.update_fields\n                 or \'\')), TR(T(\'Delete:\'), INPUT(_name=\'delete_check\',\n                _class=\'delete\', _type=\'checkbox\', value=False), \'\'),\n                TR(\'\', \'\', INPUT(_type=\'submit\', _value=\'submit\'))),\n                _action=URL(r=request,args=request.args))\n    if request.vars.csvfile != None:\n        try:\n            import_csv(db[request.vars.table],\n                       request.vars.csvfile.file)\n            response.flash = T(\'data uploaded\')\n        except Exception, e:\n            response.flash = DIV(T(\'unable to parse csv file\'),PRE(str(e)))\n    if form.accepts(request.vars, formname=None):\n#         regex = re.compile(request.args[0] + \'\\.(?P<table>\\w+)\\.id\\>0\')\n        regex = re.compile(request.args[0] + \'\\.(?P<table>\\w+)\\..+\')\n        \n        match = regex.match(form.vars.query.strip())\n        if match:\n            table = match.group(\'table\')\n        try:\n            nrows = db(query).count()\n            if form.vars.update_check and form.vars.update_fields:\n                db(query).update(**eval_in_global_env(\'dict(%s)\'\n                                  % form.vars.update_fields))\n                response.flash = T(\'%s rows updated\', nrows)\n            elif form.vars.delete_check:\n                db(query).delete()\n                response.flash = T(\'%s rows deleted\', nrows)\n            nrows = db(query).count()\n            if orderby:\n                rows = db(query).select(limitby=(start, stop),\n                        orderby=eval_in_global_env(orderby))\n            else:\n                rows = db(query).select(limitby=(start, stop))\n        except Exception, e:\n            (rows, nrows) = ([], 0)\n            response.flash = DIV(T(\'Invalid Query\'),PRE(str(e)))\n    return dict(\n        form=form,\n        table=table,\n        start=start,\n        stop=stop,\n        nrows=nrows,\n        rows=rows,\n        query=request.vars.query,\n        )\n\n\n# ##########################################################\n# ## edit delete one record\n# ###########################################################\n\n\ndef update():\n    (db, table) = get_table(request)\n    keyed = hasattr(db[table],\'_primarykey\')\n    record = None\n    if keyed:\n        key = [f for f in request.vars if f in db[table]._primarykey]\n        if key:\n            record = db(db[table][key[0]] == request.vars[key[0]]).select().first()\n    else:\n        record = db(db[table].id == request.args(2)).select().first()\n\n    if not record:\n        qry = query_by_table_type(table, db)\n        session.flash = T(\'record does not exist\')\n        redirect(URL(r=request, f=\'select\', args=request.args[:1],\n                     vars=dict(query=qry)))\n    \n    if keyed:\n        for k in db[table]._primarykey: \n            db[table][k].writable=False\n    \n    form = SQLFORM(db[table], record, deletable=True, delete_label=T(\'Check to delete\'), \n                   ignore_rw=ignore_rw and not keyed,\n                   linkto=URL(r=request, f=\'select\',\n                   args=request.args[:1]), upload=URL(r=request,\n                   f=\'download\', args=request.args[:1]))\n\n    if form.accepts(request.vars, session):\n        session.flash = T(\'done!\')\n        qry = query_by_table_type(table, db)\n        redirect(URL(r=request, f=\'select\', args=request.args[:1],\n                 vars=dict(query=qry)))\n    return dict(form=form,table=db[table])\n\n\n# ##########################################################\n# ## get global variables\n# ###########################################################\n\n\ndef state():\n    return dict()\n\ndef ccache():\n    form = FORM(\n        P(TAG.BUTTON("Clear CACHE?", _type="submit", _name="yes", _value="yes")),\n        P(TAG.BUTTON("Clear RAM", _type="submit", _name="ram", _value="ram")),\n        P(TAG.BUTTON("Clear DISK", _type="submit", _name="disk", _value="disk")),\n    )\n    \n    if form.accepts(request.vars, session):\n        clear_ram = False\n        clear_disk = False\n        session.flash = ""\n        if request.vars.yes:\n            clear_ram = clear_disk = True\n        if request.vars.ram:\n            clear_ram = True\n        if request.vars.disk:\n            clear_disk = True\n            \n        if clear_ram:\n            cache.ram.clear()\n            session.flash += "Ram Cleared "\n        if clear_disk:\n            cache.disk.clear()\n            session.flash += "Disk Cleared"\n            \n        redirect(URL(r=request))\n    \n    try:\n        from guppy import hpy; hp=hpy()\n    except ImportError:\n        hp = False\n        \n    import shelve, os, copy, time, math\n    from gluon import portalocker\n    \n    ram = {\n        \'bytes\': 0,\n        \'objects\': 0,\n        \'hits\': 0,\n        \'misses\': 0,\n        \'ratio\': 0,\n        \'oldest\': time.time()\n    }\n    disk = copy.copy(ram)\n    total = copy.copy(ram)\n    \n    for key, value in cache.ram.storage.items():\n        if isinstance(value, dict):\n            ram[\'hits\'] = value[\'hit_total\'] - value[\'misses\']\n            ram[\'misses\'] = value[\'misses\']\n            try:\n                ram[\'ratio\'] = ram[\'hits\'] * 100 / value[\'hit_total\']\n            except (KeyError, ZeroDivisionError):\n                ram[\'ratio\'] = 0\n        else:\n            if hp:\n                ram[\'bytes\'] += hp.iso(value[1]).size\n                ram[\'objects\'] += hp.iso(value[1]).count\n                \n                if value[0] < ram[\'oldest\']:\n                    ram[\'oldest\'] = value[0]\n    \n    locker = open(os.path.join(request.folder,\n                                        \'cache/cache.lock\'), \'a\')\n    portalocker.lock(locker, portalocker.LOCK_EX)\n    disk_storage = shelve.open(\n        os.path.join(request.folder,\n                \'cache/cache.shelve\'))\n    \n    for key, value in disk_storage.items():\n        if isinstance(value, dict):\n            disk[\'hits\'] = value[\'hit_total\'] - value[\'misses\']\n            disk[\'misses\'] = value[\'misses\']\n            try:\n                disk[\'ratio\'] = disk[\'hits\'] * 100 / value[\'hit_total\']\n            except (KeyError, ZeroDivisionError):\n                disk[\'ratio\'] = 0\n        else:\n            if hp:\n                disk[\'bytes\'] += hp.iso(value[1]).size\n                disk[\'objects\'] += hp.iso(value[1]).count\n                if value[0] < disk[\'oldest\']:\n                    disk[\'oldest\'] = value[0]\n        \n    portalocker.unlock(locker)\n    locker.close()\n    disk_storage.close()        \n    \n    total[\'bytes\'] = ram[\'bytes\'] + disk[\'bytes\']\n    total[\'objects\'] = ram[\'objects\'] + disk[\'objects\']\n    total[\'hits\'] = ram[\'hits\'] + disk[\'hits\']\n    total[\'misses\'] = ram[\'misses\'] + disk[\'misses\']\n    try:\n        total[\'ratio\'] = total[\'hits\'] * 100 / (total[\'hits\'] + total[\'misses\'])\n    except (KeyError, ZeroDivisionError):\n        total[\'ratio\'] = 0\n    \n    if disk[\'oldest\'] < ram[\'oldest\']:\n        total[\'oldest\'] = disk[\'oldest\']\n    else:\n        total[\'oldest\'] = ram[\'oldest\']\n    \n    def GetInHMS(seconds):\n        hours = math.floor(seconds / 3600)\n        seconds -= hours * 3600\n        minutes = math.floor(seconds / 60)\n        seconds -= minutes * 60\n        seconds = math.floor(seconds)\n        \n        return (hours, minutes, seconds)\n\n    ram[\'oldest\'] = GetInHMS(time.time() - ram[\'oldest\'])\n    disk[\'oldest\'] = GetInHMS(time.time() - disk[\'oldest\'])\n    total[\'oldest\'] = GetInHMS(time.time() - total[\'oldest\'])\n    \n    return dict(form=form, total=total,\n                ram=ram, disk=disk)\n\n\nresponse._vars=response._caller(insert)\n'
p6
sS'snapshot'
p7
(dp8
S'exception'
p9
(dp10
S'__module__'
p11
S"'psycopg2'"
p12
sS'__getslice__'
p13
S"<method-wrapper '__getslice__' of ProgrammingError object>"
p14
sS'__str__'
p15
S"<method-wrapper '__str__' of ProgrammingError object>"
p16
sS'__reduce__'
p17
S'<built-in method __reduce__ of ProgrammingError object>'
p18
sS'__dict__'
p19
S'{\'cursor\': <cursor object at 0xdab1f0c; closed: 0>, \'pgcode\': \'42P01\', \'pgerror\': \'ERROR:  relation "alunos" does not exist\\nLINE 1:...ord) VALUES (\\\'teste@exa...\\n                    ^\\n\'}'
p20
sS'__sizeof__'
p21
S'<built-in method __sizeof__ of ProgrammingError object>'
p22
sS'__weakref__'
p23
S'None'
p24
sS'__init__'
p25
S"<method-wrapper '__init__' of ProgrammingError object>"
p26
sS'__setattr__'
p27
S"<method-wrapper '__setattr__' of ProgrammingError object>"
p28
sS'__reduce_ex__'
p29
S'<built-in method __reduce_ex__ of ProgrammingError object>'
p30
sS'__new__'
p31
S'<built-in method __new__ of type object>'
p32
sS'__format__'
p33
S'<built-in method __format__ of ProgrammingError object>'
p34
sS'__class__'
p35
S"<class 'psycopg2.ProgrammingError'>"
p36
sS'pgerror'
p37
S'\'ERROR:  relation "alunos" does not exist\\nLINE 1:...ord) VALUES (\\\'teste@exa...\\n                    ^\\n\''
p38
sS'__doc__'
p39
S"'Error related to database programming (SQL error, table not found etc).'"
p40
sS'__getitem__'
p41
S"<method-wrapper '__getitem__' of ProgrammingError object>"
p42
sS'__setstate__'
p43
S'<built-in method __setstate__ of ProgrammingError object>'
p44
sS'__getattribute__'
p45
S"<method-wrapper '__getattribute__' of ProgrammingError object>"
p46
sS'args'
p47
S'(\'relation "alunos" does not exist\\nLINE 1: INSERT ...ord) VALUES (\\\'teste@exa...\\n                    ^\\n\',)'
p48
sS'__subclasshook__'
p49
S'<built-in method __subclasshook__ of type object>'
p50
sS'pgcode'
p51
S"'42P01'"
p52
sS'__unicode__'
p53
S'<built-in method __unicode__ of ProgrammingError object>'
p54
sS'cursor'
p55
S'<cursor object at 0xdab1f0c; closed: 0>'
p56
sS'__delattr__'
p57
S"<method-wrapper '__delattr__' of ProgrammingError object>"
p58
sS'__repr__'
p59
S"<method-wrapper '__repr__' of ProgrammingError object>"
p60
sS'__hash__'
p61
S"<method-wrapper '__hash__' of ProgrammingError object>"
p62
ssS'evalue'
p63
S'relation "alunos" does not exist\nLINE 1: INSERT INTO alunos(email, name, password) VALUES (\'teste@exa...\n                    ^\n'
p64
sS'request'
p65
(dp66
S'function'
p67
S"'insert'"
p68
sS'body'
p69
S"<open file '<fdopen>', mode 'w+b'>"
p70
sS'wsgi'
p71
S"<Storage {'start_response': <function <lambda> a...ING': 'gzip,deflate', 'HTTP_KEEP_ALIVE': '115'}}>"
p72
sS'extension'
p73
S"'html'"
p74
sS'vars'
p75
S"<Storage {'_formkey': '4c5df9f3-3897-41f0-b77e-4...e', 'name': '123', 'email': 'teste@example.com'}>"
p76
sS'cid'
p77
S'None'
p78
sS'url'
p79
S"'/ForCA/appadmin/insert/db/alunos'"
p80
sg47
S"['db', 'alunos']"
p81
sS'controller'
p82
S"'appadmin'"
p83
sS'cookies'
p84
S"<SimpleCookie: session_id_ForCA='127-0-0-1-8bb1b...'127-0-0-1-3835ea12-86a2-4dae-95dc-fe0b3f86823c'>"
p85
sS'application'
p86
S"'ForCA'"
p87
sS'ajax'
p88
S'False'
p89
sS'client'
p90
S"'127.0.0.1'"
p91
sS'env'
p92
S"<Storage {'content_length': '681', 'http_user_ag...te', 'query_string': '', 'wsgi_run_once': False}>"
p93
sS'raw_args'
p94
S"'db/alunos'"
p95
sS'get_vars'
p96
S'<Storage {}>'
p97
sS'folder'
p98
S"'/home/tiago/web2py/applications/ForCA/'"
p99
sS'now'
p100
S'datetime.datetime(2010, 9, 1, 0, 33, 2, 410260)'
p101
sS'post_vars'
p102
S"<Storage {'_formkey': '4c5df9f3-3897-41f0-b77e-4...e', 'name': '123', 'email': 'teste@example.com'}>"
p103
ssS'frames'
p104
(lp105
(dp106
S'file'
p107
S'/home/tiago/web2py/gluon/restricted.py'
p108
sS'dump'
p109
(dp110
S'environment'
p111
S"{'A': <class 'gluon.html.A'>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'CENTER': <class 'gluon.html.CENTER'>, 'CLEANUP': <class 'gluon.validators.CLEANUP'>, 'CODE': <class 'gluon.html.CODE'>, 'CRYPT': <class 'gluon.validators.CRYPT'>, ...}"
p112
sS'ccode'
p113
S'<code object <module> at 0xa2ccde8, file "/home/...lications/ForCA/controllers/appadmin.py", line 7>'
p114
ssS'lnum'
p115
I186
sS'lines'
p116
(dp117
I181
S'        if type(code) == types.CodeType:'
p118
sI182
S'            ccode = code'
p119
sI183
S'        else:'
p120
sI184
S'            ccode = compile2(code,layer)'
p121
sI185
S''
sI186
S'        exec ccode in environment'
p122
sI187
S'    except HTTP:'
p123
sI188
S'        raise'
p124
sI189
S'    except Exception:'
p125
sI190
S'        # XXX Show exception in Wing IDE if running in debugger'
p126
ssS'call'
p127
S"(code='# -*- coding: utf-8 -*-\\n\\n# #####################...=disk)\\n\\n\\nresponse._vars=response._caller(insert)\\n', environment={'A': <class 'gluon.html.A'>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'CENTER': <class 'gluon.html.CENTER'>, 'CLEANUP': <class 'gluon.validators.CLEANUP'>, 'CODE': <class 'gluon.html.CODE'>, 'CRYPT': <class 'gluon.validators.CRYPT'>, ...}, layer='/home/tiago/web2py/applications/ForCA/controllers/appadmin.py')"
p128
sS'func'
p129
S'restricted'
p130
sa(dp131
g107
S'/home/tiago/web2py/applications/ForCA/controllers/appadmin.py'
p132
sg109
(dp133
sg115
I410
sg116
(dp134
I399
S''
sI400
S'        return (hours, minutes, seconds)'
p135
sI401
S''
sI402
S"    ram['oldest'] = GetInHMS(time.time() - ram['oldest'])"
p136
sI403
S"    disk['oldest'] = GetInHMS(time.time() - disk['oldest'])"
p137
sI404
S"    total['oldest'] = GetInHMS(time.time() - total['oldest'])"
p138
sI405
S''
sI406
S'    return dict(form=form, total=total,'
p139
sI407
S'                ram=ram, disk=disk)'
p140
sI408
S''
ssg127
S'()'
p141
sg129
S'<module>'
p142
sa(dp143
g107
S'/home/tiago/web2py/gluon/globals.py'
p144
sg109
(dp145
S'self'
p146
S'undefined'
p147
sS'f'
S'<function insert>'
p148
ssg115
I96
sg116
(dp149
I96
S'        self._caller = lambda f: f()'
p150
sI97
S'        self._view_environment = None'
p151
sI98
S'        self._custom_commit = None'
p152
sI99
S'        self._custom_rollback = None'
p153
sI100
S''
sI91
S"        self.flash = ''           # used by the default view layout"
p154
sI92
S'        self.meta = Storage()     # used by web2py_ajax.html'
p155
sI93
S'        self.menu = []            # used by the default view layout'
p156
sI94
S'        self.files = []           # used by web2py_ajax.html'
p157
sI95
S'        self._vars = None'
p158
ssg127
S'(f=<function insert>)'
p159
sg129
S'<lambda>'
p160
sa(dp161
g107
S'/home/tiago/web2py/applications/ForCA/controllers/appadmin.py'
p162
sg109
(dp163
S'global request'
p164
S"<Storage {'function': 'insert', 'body': <open fi..., 'name': '123', 'email': 'teste@example.com'}>}>"
p165
sS'request.vars'
p166
S"<Storage {'_formkey': '4c5df9f3-3897-41f0-b77e-4...e', 'name': '123', 'email': 'teste@example.com'}>"
p167
sS'global session'
p168
S"<Storage {'_formkey[alunos_create]': '6ddffc40-c352-42cc-ac7c-90a75f79ff60', 'auth': None}>"
p169
sS'form'
p170
S'<gluon.sqlhtml.SQLFORM object>'
p171
sS'form.accepts'
p172
S'<bound method SQLFORM.accepts of <gluon.sqlhtml.SQLFORM object>>'
p173
ssg115
I125
sg116
(dp174
I128
S''
sI129
S''
sI120
S''
sI121
S''
sI122
S'def insert():'
p175
sI123
S'    (db, table) = get_table(request)'
p176
sI124
S'    form = SQLFORM(db[table], ignore_rw=ignore_rw)'
p177
sI125
S'    if form.accepts(request.vars, session):'
p178
sI126
S"        response.flash = T('new record inserted')"
p179
sI127
S'    return dict(form=form,table=db[table])'
p180
ssg127
S'()'
p181
sg129
S'insert'
p182
sa(dp183
g107
S'/home/tiago/web2py/gluon/sqlhtml.py'
p184
sg109
(dp185
S'self.vars.id'
p186
S'None'
p187
sS'fields'
p188
S"{'email': 'teste@example.com', 'name': '123', 'password': 'xxx'}"
p189
sS'self'
p190
S'<gluon.sqlhtml.SQLFORM object>'
p191
sS'self.vars'
p192
S"<Storage {'password': 'xxx', 'email': 'teste@example.com', 'name': '123'}>"
p193
sS'self.table.insert'
p194
S"<bound method Table.insert of <Table {'ALL': <gl...], 'id': <gluon.sql.Field object at 0xd7816cc>}>>"
p195
sS'self.table'
p196
S"<Table {'ALL': <gluon.sql.SQLALL object at 0xd78...[], 'id': <gluon.sql.Field object at 0xd7816cc>}>"
p197
ssg115
I1049
sg116
(dp198
I1044
S'                if record_id:'
p199
sI1045
S'                    self.vars.id = self.record.id'
p200
sI1046
S'                    if fields:'
p201
sI1047
S'                        self.table._db(self.table.id == self.record.id).update(**fields)'
p202
sI1048
S'                else:'
p203
sI1049
S'                    self.vars.id = self.table.insert(**fields)'
p204
sI1050
S'        return ret'
p205
sI1051
S''
sI1052
S'    @staticmethod'
p206
sI1053
S'    def factory(*fields, **attributes):'
p207
ssg127
S"(self=<gluon.sqlhtml.SQLFORM object>, request_vars=<Storage {'_formkey': '4c5df9f3-3897-41f0-b77e-4...e', 'name': '123', 'email': 'teste@example.com'}>, session=<Storage {'_formkey[alunos_create]': '6ddffc40-c352-42cc-ac7c-90a75f79ff60', 'auth': None}>, formname='alunos_create', keepvalues=False, onvalidation=None, dbio=True, hideerror=False)"
p208
sg129
S'accepts'
p209
sa(dp210
g107
S'/home/tiago/web2py/gluon/sql.py'
p211
sg109
(dp212
S'self._db._execute'
p213
S'<function <lambda>>'
p214
sS'query'
p215
S'"INSERT INTO alunos(email, name, password) VALUES (\'teste@example.com\', \'123\', \'xxx\');"'
p216
sS'self'
p217
S"<Table {'ALL': <gluon.sql.SQLALL object at 0xd78...[], 'id': <gluon.sql.Field object at 0xd7816cc>}>"
p218
sS'self._db'
p219
S"<SQLDB {'_connection': <connection object at 0xa...l.Field object at 0xd781ccc>}>, '_pool_size': 0}>"
p220
ssg115
I2005
sg116
(dp221
I2000
S'        return [self.insert(**item) for item in items]'
p222
sI2001
S''
sI2002
S'    def insert(self, **fields):'
p223
sI2003
S'        query = self._insert(**fields)'
p224
sI2004
S"        self._db['_lastsql'] = query"
p225
sI2005
S'        self._db._execute(query)'
p226
sI2006
S"        if self._db._dbname == 'sqlite':"
p227
sI2007
S'            id = self._db._cursor.lastrowid'
p228
sI2008
S"        elif self._db._dbname == 'postgres':"
p229
sI2009
S'            self._db._execute("select currval(\'%s\')" % self._sequence_name)'
p230
ssg127
S"(self=<Table {'ALL': <gluon.sql.SQLALL object at 0xd78...[], 'id': <gluon.sql.Field object at 0xd7816cc>}>, **fields={'email': 'teste@example.com', 'name': '123', 'password': 'xxx'})"
p231
sg129
g182
sa(dp232
g107
S'/home/tiago/web2py/gluon/sql.py'
p233
sg109
(dp234
S'a'
S'("INSERT INTO alunos(email, name, password) VALUES (\'teste@example.com\', \'123\', \'xxx\');",)'
p235
sS'b'
S'{}'
p236
sS'self._execute'
p237
S'<function <lambda>>'
p238
sS'self'
p239
S"<SQLDB {'_connection': <connection object at 0xa...l.Field object at 0xd781ccc>}>, '_pool_size': 0}>"
p240
sS'self._cursor'
p241
S'<cursor object at 0xdab1f0c; closed: 0>'
p242
sS'self._cursor.execute'
p243
S'<built-in method execute of psycopg2._psycopg.cursor object>'
p244
ssg115
I1010
sg116
(dp245
I1005
S'                "dbname=\'%s\' user=\'%s\' host=\'%s\' port=%s password=\'%s\'"\\'
p246
sI1006
S'                 % (db, user, host, port, passwd)'
p247
sI1007
S'            self._pool_connection(lambda : psycopg2.connect(msg))'
p248
sI1008
S"            self._connection.set_client_encoding('UTF8')"
p249
sI1009
S'            self._cursor = self._connection.cursor()'
p250
sI1010
S'            self._execute = lambda *a, **b: self._cursor.execute(*a, **b)'
p251
sI1011
S"            query = 'BEGIN;'"
p252
sI1012
S"            self['_lastsql'] = query"
p253
sI1013
S'            self._execute(query)'
p254
sI1014
S'            self._execute("SET CLIENT_ENCODING TO \'UNICODE\';")  # ## not completely sure but should work'
p255
ssg127
S'(*a=("INSERT INTO alunos(email, name, password) VALUES (\'teste@example.com\', \'123\', \'xxx\');",), **b={})'
p256
sg129
g160
sasS'pyver'
p257
S'Python 2.6.5: /usr/bin/python'
p258
sS'session'
p259
(dp260
S'_formkey[alunos_create]'
p261
S"'6ddffc40-c352-42cc-ac7c-90a75f79ff60'"
p262
sS'auth'
p263
S'None'
p264
ssS'etype'
p265
S"<class 'psycopg2.ProgrammingError'>"
p266
sS'date'
p267
S'Wed Sep  1 00:33:02 2010'
p268
sS'response'
p269
(dp270
S'status'
p271
S'200'
p272
sg69
S'<cStringIO.StringO object>'
p273
sg84
S"<SimpleCookie: session_id_ForCA='127-0-0-1-8bb1be4f-ac83-4bcd-af59-35995a2d4b04'>"
p274
sS'_vars'
p275
S'None'
p276
sS'title'
p277
S"'ForCA'"
p278
sS'session_file'
p279
S"<open file '/home/tiago/web2py/applications/ForC...bb1be4f-ac83-4bcd-af59-35995a2d4b04', mode 'rb+'>"
p280
sS'flash'
p281
S"''"
p282
sS'_custom_rollback'
p283
S'None'
p284
sS'session_id'
p285
S"'127-0-0-1-8bb1be4f-ac83-4bcd-af59-35995a2d4b04'"
p286
sS'headers'
p287
S"<Storage {'Expires': 'Wed, 01 Sep 2010 03:33:02 ...he, must-revalidate, post-check=0, pre-check=0'}>"
p288
sS'meta'
p289
S"<Storage {'keywords': 'bla bla bla', 'description': 'describe your app', 'author': 'you'}>"
p290
sS'session_filename'
p291
S"'/home/tiago/web2py/applications/ForCA/sessions/127-0-0-1-8bb1be4f-ac83-4bcd-af59-35995a2d4b04'"
p292
sS'postprocessing'
p293
S'[]'
p294
sS'menu'
p295
S"[[<lazyT 'design'>, False, '/admin/default/design/ForCA'], [<lazyT 'db'>, False, '/ForCA/appadmin/index'], [<lazyT 'state'>, False, '/ForCA/appadmin/state'], [<lazyT 'cache'>, False, '/ForCA/appadmin/ccache']]"
p296
sS'_view_environment'
p297
S"{'A': <class 'gluon.html.A'>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'CENTER': <class 'gluon.html.CENTER'>, 'CLEANUP': <class 'gluon.validators.CLEANUP'>, 'CODE': <class 'gluon.html.CODE'>, 'CRYPT': <class 'gluon.validators.CRYPT'>, ...}"
p298
sS'subtitle'
p299
S"<lazyT 'customize me!'>"
p300
sS'session_id_name'
p301
S"'session_id_ForCA'"
p302
sS'_custom_commit'
p303
S'None'
p304
sS'_caller'
p305
S'<function <lambda>>'
p306
sS'files'
p307
S'[]'
p308
sS'view'
p309
S"'appadmin.html'"
p310
ssS'locals'
p311
(dp312
S'a'
S'("INSERT INTO alunos(email, name, password) VALUES (\'teste@example.com\', \'123\', \'xxx\');",)'
p313
sS'self'
p314
S"<SQLDB {'_connection': <connection object at 0xa...l.Field object at 0xd781ccc>}>, '_pool_size': 0}>"
p315
sS'b'
g236
sssS'traceback'
p316
S'Traceback (most recent call last):\n  File "/home/tiago/web2py/gluon/restricted.py", line 186, in restricted\n    exec ccode in environment\n  File "/home/tiago/web2py/applications/ForCA/controllers/appadmin.py", line 410, in <module>\n  File "/home/tiago/web2py/gluon/globals.py", line 96, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/tiago/web2py/applications/ForCA/controllers/appadmin.py", line 125, in insert\n    if form.accepts(request.vars, session):\n  File "/home/tiago/web2py/gluon/sqlhtml.py", line 1049, in accepts\n    self.vars.id = self.table.insert(**fields)\n  File "/home/tiago/web2py/gluon/sql.py", line 2005, in insert\n    self._db._execute(query)\n  File "/home/tiago/web2py/gluon/sql.py", line 1010, in <lambda>\n    self._execute = lambda *a, **b: self._cursor.execute(*a, **b)\nProgrammingError: relation "alunos" does not exist\nLINE 1: INSERT INTO alunos(email, name, password) VALUES (\'teste@exa...\n                    ^\n\n'
p317
s.